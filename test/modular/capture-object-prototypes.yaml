# Resuable module for capturing objects
#
#   SpawnObject, TowObject, CaptureObject, DropObject
#
eventPrototype:
  # TowObject: 
  #     Event for towing an object
  # inputs:
  #     ship: Name of the ship
  #     object: Object to capture
  #     sideValue: Number for ship to use in text message etc.
  TowObject:
    name: ${ship} Tow ${object}
    conditions:
      - ${object} == ${sideValue}
      - exists: ${ship}
    # note assumes object has no space in the name for mesh, minor rewrite in not 
    relative_position:
      - name2: ${object}
        distance: 100
        angle: 180
        name1: ${ship}
  # ClaimObject: 
  #     Event for claiming an object
  # inputs:
  #     ship: Name of the ship
  #     object: Object to capture
  #     target: where to take the object to capture
  #     sideValue: Number for ship to use in text message etc.
  #     score: Variable for scoring
  #     points: Points that are scored
  #     timeForSpawn: Timer fo setting timer
  #  creates:
  #      timer: ${ship}_Timer
  ClaimObject:
    name: ${ship} Claim ${object}
    conditions:
      - ${object} == ${sideValue}
      - docked: 
          player_name: ${ship}
          name: ${target}
      - Scoring_Allowed == 1.0
    
    variables:
      ${score}: ${score}+${points}
      ${object}: 1.0
      ${ship}_Cargo: 0.0
    
    destroy: 
      - ${object}

    timer: 
      - ${object}_Timer: timeForSpawn    
    incoming_comms_text:
      - from: ${target}
        sideValue: ${sideValue}
        text: object Secured. ${ship} has captured ${object}|${score}| objects
  # CaptureObject: 
  #     Event for towing an object
  # inputs:
  #     ship: Name of the ship
  #     object: Object to capture
  #     distance: The distance needed to capture
  Captureobject:
    name: ${ship} Capture ${object}

    conditions:
      - distance: 
          name1: ${ship}
          name2: ${object}
          comparator: "<= ${distance}"
      - ${object} == 2.0
      - ${cargo} == 0.0
      
    variables:
      ${object}: ${sideValue} 
    
    incoming_comms_text:
      - from: Tractor Control
        sideValue: ${sideValue}
        text: ${ship} has control of ${object}
  # DropObject: 
  #     Event for dropping an object
  # inputs:
  #     ship: Name of the ship
  #     object: Object to capture
  #     sideValue: number for ship in UI elements
  #     distance: The distance needed to capture
  #     cargo: Varible for cargo
  DropObject:
    name: ${ship} Drop ${object}
    conditions:
      - distance:
          name1: ${ship}
          name2: ${object}
          comparator: ">= ${distance}"
      - ${object} == ${sideValue}

    variables:
      ${object}: 2.0
      ${cargo}: 0.0
    
    incoming_comms_text:
      - from: Tractor Control
        sideValue: ${sideValue}
        text: ${ship} lost control of ${object}.
  # SpawnObject: 
  #     Event for dropping an object
  # inputs:
  #     ship: Name of the ship
  #     object: Object to capture
  #     sideValue: number for ship in UI elements
  #     mesh: Mesh for Object
  #     texture: Texture for Object
  #     x: y: z: Location for spawn
  #     playerNeeded: Needed number of Players
  #     totalPlayers: Count of total Players
  #  expects:
  #     timer: ${ship}_Timer Created in  ClaimObject
  SpawnObject:
    name: Spawn ${object}

    conditions:
      - ${object} == 1.0
      - if_timer_finished: ${object}_Timer
      - ${totalPlayers} > ${playerNeeded}
    
    variables:
      ${object}: 2.0
    
    genericMesh: 
      x: ${x}
      y: ${y}
      z: ${z}
      name: ${object}
      meshFileName: ${mesh}
      textureFileName: ${texture}
    
    properties:
      ${object}:      
        pushRadius: 0.0
